
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 09 16:45:16 PDT 2010
//----------------------------------------------------

package com.biosimilarity.scalate.model.WhiteRabbit;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 09 16:45:16 PDT 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\007\000\002\004\006\000" +
    "\002\004\005\000\002\005\006\000\002\005\003\000\002" +
    "\006\003\000\002\007\002\000\002\007\003\000\002\007" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\014\004\007\010\006\014\004\015\015\016" +
    "\014\001\002\000\006\010\006\016\014\001\002\000\022" +
    "\002\ufffc\004\ufffc\005\ufffc\010\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\001\002\000\004\011\033\001\002\000\016" +
    "\004\007\005\ufff4\010\006\014\004\015\015\016\014\001" +
    "\002\000\022\002\ufffd\004\ufffd\005\ufffd\010\ufffd\012\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\001\002\000\016\002\017\004" +
    "\007\010\006\014\004\015\015\016\014\001\002\000\020" +
    "\002\uffff\004\007\005\uffff\010\006\014\004\015\015\016" +
    "\014\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\010\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\016\ufffb\001\002\000\026\002" +
    "\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\001\002\000\022\002\ufff5\004" +
    "\ufff5\005\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\001\002\000\022\002\ufffe\004\ufffe\005\ufffe\010\ufffe\012" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\001\002\000\004\002\001" +
    "\001\002\000\020\002\000\004\007\005\000\010\006\014" +
    "\004\015\015\016\014\001\002\000\020\004\ufffc\005\ufffc" +
    "\010\ufffc\013\030\014\ufffc\015\ufffc\016\ufffc\001\002\000" +
    "\004\005\025\001\002\000\016\004\007\005\024\010\006" +
    "\014\004\015\015\016\014\001\002\000\022\002\ufff8\004" +
    "\ufff8\005\ufff8\010\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\001\002\000\004\006\026\001\002\000\014\004\007\010" +
    "\006\014\004\015\015\016\014\001\002\000\022\002\ufffa" +
    "\004\ufffa\005\ufffa\010\ufffa\012\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\001\002\000\010\005\ufff4\010\006\016\014\001\002" +
    "\000\006\005\ufff3\013\030\001\002\000\004\005\ufff2\001" +
    "\002\000\014\004\007\010\006\014\004\015\015\016\014" +
    "\001\002\000\016\004\007\010\006\012\035\014\004\015" +
    "\015\016\014\001\002\000\026\002\ufff7\004\ufff7\005\ufff7" +
    "\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\001\002\000\004\007\037\001\002\000\014\004\007" +
    "\010\006\014\004\015\015\016\014\001\002\000\022\002" +
    "\ufff9\004\ufff9\005\ufff9\010\ufff9\012\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\014\002\010\003\011\004\007\005\004\006" +
    "\012\001\001\000\004\005\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\022\003\011\004\007\005" +
    "\020\006\012\007\021\001\001\000\002\001\001\000\012" +
    "\003\017\004\007\005\004\006\012\001\001\000\010\004" +
    "\015\005\004\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\015\005\004\006\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\017\004\007\005" +
    "\004\006\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\026\005\004\006\012\001\001\000\002\001" +
    "\001\000\006\005\030\007\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\033\004\007\005\004\006" +
    "\012\001\001\000\010\004\015\005\004\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\037\005" +
    "\004\006\012\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression pExpression() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListVariableExpr ::= VariableExpr _SYMB_7 ListVariableExpr 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr p_3 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListVariableExpr ::= VariableExpr 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListVariableExpr ::= 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr RESULT =null;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ValueExpr ::= _INTEGER_ 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ValueExpr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Numeric(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableExpr ::= _IDENT_ 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.AtomLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableExpr ::= _SYMB_4 _SYMB_5 Expression1 _SYMB_6 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_3 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression2 ::= _SYMB_0 Expression _SYMB_1 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_2 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression2 ::= _SYMB_8 VariableExpr _SYMB_3 Expression2 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr p_2 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_4 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Stipulation(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression2 ::= _SYMB_0 ListVariableExpr _SYMB_1 _SYMB_2 Expression2 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr p_2 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_5 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Abstraction(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression2 ::= ValueExpr 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ValueExpr p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expression2 ::= VariableExpr 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expression1 ::= Expression2 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expression1 ::= Expression1 Expression2 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_2 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Application(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expression ::= Expression1 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Expression ::= Expression Expression1 
            {
              com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_1 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression p_2 = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Sequence(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Expression EOF 
            {
              Object RESULT =null;
		com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression start_val = (com.biosimilarity.scalate.model.WhiteRabbit.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

